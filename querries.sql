-- customers
CREATE TABLE customers (
    customer_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    full_name   VARCHAR2(200) NOT NULL,
    phone       VARCHAR2(20),
    email       VARCHAR2(200),
    region      VARCHAR2(100),
    created_at  DATE DEFAULT SYSDATE
);

-- kitchens
CREATE TABLE kitchens (
    kitchen_id   NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    kitchen_name VARCHAR2(100) NOT NULL,
    region       VARCHAR2(100) NOT NULL
);

-- menu_items
CREATE TABLE menu_items (
    menu_item_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    item_name    VARCHAR2(200) NOT NULL,
    category     VARCHAR2(100),
    price        NUMBER(12,2) NOT NULL
);

-- orders
CREATE TABLE orders (
    order_id     NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    customer_id  NUMBER NOT NULL,
    kitchen_id   NUMBER NOT NULL,
    event_date   DATE NOT NULL,
    order_date   DATE DEFAULT SYSDATE,
    total_amount NUMBER(14,2),
    status       VARCHAR2(30) DEFAULT 'CONFIRMED',
    CONSTRAINT fk_orders_customer FOREIGN KEY (customer_id) REFERENCES customers(customer_id),
    CONSTRAINT fk_orders_kitchen  FOREIGN KEY (kitchen_id)  REFERENCES kitchens(kitchen_id)
);

-- order_lines (needed to connect menu_items to orders)
CREATE TABLE order_lines (
    order_line_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    order_id      NUMBER NOT NULL,
    menu_item_id  NUMBER NOT NULL,
    quantity      NUMBER NOT NULL,
    unit_price    NUMBER(12,2) NOT NULL,
    CONSTRAINT fk_ol_order FOREIGN KEY (order_id) REFERENCES orders(order_id),
    CONSTRAINT fk_ol_menu  FOREIGN KEY (menu_item_id) REFERENCES menu_items(menu_item_id)
);


INSERT INTO customers (full_name, phone, email, region) VALUES ('Marie Uwimana', '0788123456', 'marie@example.com', 'Kigali');
INSERT INTO customers (full_name, phone, email, region) VALUES ('John Nsengiyumva', '0788234567', 'john@example.com', 'Southern');
INSERT INTO customers (full_name, phone, email, region) VALUES ('Claire Mukamana', '0788345678', 'claire@example.com', 'Kigali');
INSERT INTO customers (full_name, phone, email, region) VALUES ('Paul Habimana', '0788456789', 'paul@example.com', 'Western');

INSERT INTO kitchens (kitchen_name, region) VALUES ('Kigali Central Kitchen', 'Kigali');
INSERT INTO kitchens (kitchen_name, region) VALUES ('South Feast Kitchen', 'Southern');
INSERT INTO kitchens (kitchen_name, region) VALUES ('Western Tastes', 'Western');


INSERT INTO menu_items (item_name, category, price) VALUES ('Chicken Platter', 'Main', 8000);
INSERT INTO menu_items (item_name, category, price) VALUES ('Beef Stew', 'Main', 9000);
INSERT INTO menu_items (item_name, category, price) VALUES ('Vegetarian Package', 'Main', 7000);
INSERT INTO menu_items (item_name, category, price) VALUES ('Wedding Cake Slice', 'Dessert', 1500);
INSERT INTO menu_items (item_name, category, price) VALUES ('Beans', 'Side', 2000);

INSERT INTO orders (customer_id, kitchen_id, event_date, order_date, total_amount)
VALUES (1, 1, DATE '2025-01-15', DATE '2025-01-10', 0);
-- get order_id via sequence / identity; assume it's 1
INSERT INTO order_lines (order_id, menu_item_id, quantity, unit_price) VALUES (1, 1, 100, 8000);
INSERT INTO order_lines (order_id, menu_item_id, quantity, unit_price) VALUES (1, 4, 100, 1500);

INSERT INTO orders (customer_id, kitchen_id, event_date, order_date, total_amount)
VALUES (2, 2, DATE '2025-01-20', DATE '2025-01-12', 0);
INSERT INTO order_lines (order_id, menu_item_id, quantity, unit_price) VALUES (6, 2, 150, 9000);

INSERT INTO orders (customer_id, kitchen_id, event_date, order_date, total_amount)
VALUES (3, 1, DATE '2025-02-05', DATE '2025-02-01', 0);
INSERT INTO order_lines (order_id, menu_item_id, quantity, unit_price) VALUES (3, 1, 80, 8000);
INSERT INTO order_lines (order_id, menu_item_id, quantity, unit_price) VALUES (3, 5, 80, 2000);

INSERT INTO orders (customer_id, kitchen_id, event_date, order_date, total_amount)
VALUES (4, 3, DATE '2025-03-10', DATE '2025-03-02', 0);
INSERT INTO order_lines (order_id, menu_item_id, quantity, unit_price) VALUES (4, 3, 120, 7000);

SET total_amount = (SELECT SUM(ol.quantity * ol.unit_price) FROM order_lines ol WHERE ol.order_id = o.order_id);
COMMIT;


WITH sales AS (
    SELECT 
        k.region,
        TO_CHAR(o.event_date, 'YYYY-"Q"Q') AS qtr,
        ol.menu_item_id,
        mi.item_name,
        SUM(ol.quantity * ol.unit_price) AS revenue
    FROM order_lines ol
    JOIN orders o ON ol.order_id = o.order_id
    JOIN kitchens k ON o.kitchen_id = k.kitchen_id
    JOIN menu_items mi ON ol.menu_item_id = mi.menu_item_id
    GROUP BY k.region, TO_CHAR(o.event_date, 'YYYY-"Q"Q'), ol.menu_item_id, mi.item_name
)
SELECT *
FROM (
    SELECT 
        region, 
        qtr, 
        item_name, 
        revenue,
        RANK()       OVER (PARTITION BY region, qtr ORDER BY revenue DESC) AS rnk,
        DENSE_RANK() OVER (PARTITION BY region, qtr ORDER BY revenue DESC) AS dense_rnk,
        ROW_NUMBER() OVER (PARTITION BY region, qtr ORDER BY revenue DESC) AS row_num,
        PERCENT_RANK() OVER (PARTITION BY region, qtr ORDER BY revenue DESC) AS pct_rank
    FROM sales
) sub
WHERE rnk <= 5
ORDER BY region, qtr, revenue DESC;


WITH monthly_sales AS (
  SELECT k.region,
         TRUNC(o.event_date, 'MM') AS month,
         SUM(ol.quantity * ol.unit_price) AS month_revenue
  FROM orders o
  JOIN order_lines ol ON o.order_id = ol.order_id
  JOIN kitchens k ON o.kitchen_id = k.kitchen_id
  GROUP BY k.region, TRUNC(o.event_date, 'MM')
)
SELECT region,
       month,
       month_revenue,
       SUM(month_revenue) OVER (PARTITION BY region ORDER BY month
                                ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS running_revenue
FROM monthly_sales
ORDER BY region, month;


WITH monthly_sales AS (
  SELECT k.region,
         TRUNC(o.event_date, 'MM') AS month,
         SUM(ol.quantity * ol.unit_price) AS month_revenue
  FROM orders o
  JOIN order_lines ol ON o.order_id = ol.order_id
  JOIN kitchens k ON o.kitchen_id = k.kitchen_id
  GROUP BY k.region, TRUNC(o.event_date, 'MM')
)
SELECT region,
       month,
       month_revenue,
       LAG(month_revenue) OVER (PARTITION BY region ORDER BY month) AS prev_month_revenue,
       CASE
         WHEN LAG(month_revenue) OVER (PARTITION BY region ORDER BY month) IS NULL THEN NULL
         WHEN LAG(month_revenue) OVER (PARTITION BY region ORDER BY month) = 0 THEN NULL
         ELSE ROUND( (month_revenue - LAG(month_revenue) OVER (PARTITION BY region ORDER BY month)) / LAG(month_revenue) OVER (PARTITION BY region ORDER BY month) * 100, 2)
       END AS mom_growth_pct
FROM monthly_sales
ORDER BY region, month;


WITH cust_revenue AS (
  SELECT c.customer_id, c.full_name, c.region,
         SUM(ol.quantity * ol.unit_price) AS total_revenue
  FROM customers c
  LEFT JOIN orders o ON c.customer_id = o.customer_id
  LEFT JOIN order_lines ol ON o.order_id = ol.order_id
  GROUP BY c.customer_id, c.full_name, c.region
)
SELECT customer_id, full_name, region, total_revenue,
       NTILE(4) OVER (ORDER BY total_revenue DESC) AS revenue_quartile,
       CUME_DIST() OVER (ORDER BY total_revenue DESC) AS cume_dist
FROM cust_revenue
ORDER BY total_revenue DESC;


WITH monthly_sales AS (
  SELECT k.region,
         TRUNC(o.event_date, 'MM') AS month,
         SUM(ol.quantity * ol.unit_price) AS month_revenue
  FROM orders o
  JOIN order_lines ol ON o.order_id = ol.order_id
  JOIN kitchens k ON o.kitchen_id = k.kitchen_id
  GROUP BY k.region, TRUNC(o.event_date, 'MM')
)
SELECT region,
       month,
       month_revenue,
       ROUND(AVG(month_revenue) OVER (PARTITION BY region ORDER BY month
                                      ROWS BETWEEN 2 PRECEDING AND CURRENT ROW), 2) AS moving_avg_3mo
FROM monthly_sales
ORDER BY region, month;